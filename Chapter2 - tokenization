{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMTVNXuD7tQ229dxzOVjZrQ"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Load text"],"metadata":{"id":"pcif6uilTMW0"}},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eO303gQiR1qG","executionInfo":{"status":"ok","timestamp":1709804372095,"user_tz":-540,"elapsed":3,"user":{"displayName":"Ivan Ivanov","userId":"07148886510355966198"}},"outputId":"430be57c-873e-4f19-8a0c-4b2610833283"},"outputs":[{"output_type":"stream","name":"stdout","text":["Total number of character: 20479\n","I HAD always thought Jack Gisburn rather a cheap genius--though a good fellow enough--so it was no \n"]}],"source":["# The Verdict found on wikisource\n","with open(\"the-verdict.txt\", \"r\", encoding=\"utf-8\") as f:\n","    raw_text = f.read()\n","print(\"Total number of character:\", len(raw_text))\n","print(raw_text[:99])"]},{"cell_type":"markdown","source":["# Tokenization"],"metadata":{"id":"gs1MHdfPTQmy"}},{"cell_type":"code","source":["import re\n","\n","preprocessed = re.split(r'([,.?_!\"()\\']|--|\\s)', raw_text)\n","preprocessed = [item.strip() for item in preprocessed if item.strip()]\n","print(len(preprocessed))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"j9GK7_IrSD18","executionInfo":{"status":"ok","timestamp":1709804494906,"user_tz":-540,"elapsed":4,"user":{"displayName":"Ivan Ivanov","userId":"07148886510355966198"}},"outputId":"1392c508-e245-4763-e30f-2123c448a060"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["4649\n"]}]},{"cell_type":"code","source":["print(preprocessed[:30])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0tGE4A41Shwm","executionInfo":{"status":"ok","timestamp":1709804507060,"user_tz":-540,"elapsed":4,"user":{"displayName":"Ivan Ivanov","userId":"07148886510355966198"}},"outputId":"4f8027c8-810f-4ee3-ec94-fd63a152594c"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["['I', 'HAD', 'always', 'thought', 'Jack', 'Gisburn', 'rather', 'a', 'cheap', 'genius', '--', 'though', 'a', 'good', 'fellow', 'enough', '--', 'so', 'it', 'was', 'no', 'great', 'surprise', 'to', 'me', 'to', 'hear', 'that', ',', 'in']\n"]}]},{"cell_type":"markdown","source":["# Convert tokens to IDs"],"metadata":{"id":"zLQv9l3WTUGI"}},{"cell_type":"code","source":["all_words = sorted(list(set(preprocessed)))\n","vocab_size = len(all_words)\n","print(vocab_size)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xbDj_ACcSk0r","executionInfo":{"status":"ok","timestamp":1709805781505,"user_tz":-540,"elapsed":2,"user":{"displayName":"Ivan Ivanov","userId":"07148886510355966198"}},"outputId":"9e1960da-50db-4c72-9f8b-243cf12e7178"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["1159\n"]}]},{"cell_type":"code","source":["vocab = {t:i for i,t in enumerate(all_words)}\n","for i, item in enumerate(vocab.items()):\n","  print(item)\n","  if i > 20:\n","    break"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"q35sTwovXb4f","executionInfo":{"status":"ok","timestamp":1709805860427,"user_tz":-540,"elapsed":297,"user":{"displayName":"Ivan Ivanov","userId":"07148886510355966198"}},"outputId":"16174f15-7006-4aa1-bd71-dcec874c35c3"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["('!', 0)\n","('\"', 1)\n","(\"'\", 2)\n","('(', 3)\n","(')', 4)\n","(',', 5)\n","('--', 6)\n","('.', 7)\n","(':', 8)\n","(';', 9)\n","('?', 10)\n","('A', 11)\n","('Ah', 12)\n","('Among', 13)\n","('And', 14)\n","('Are', 15)\n","('Arrt', 16)\n","('As', 17)\n","('At', 18)\n","('Be', 19)\n","('Begin', 20)\n","('Burlington', 21)\n"]}]},{"cell_type":"markdown","source":["# Simple Tokenizer"],"metadata":{"id":"j3zR49pdYm_6"}},{"cell_type":"code","source":["class SimpleTokenizerV1:\n","  def __init__(self, vocab):\n","    self.s_to_i = vocab\n","    self.i_to_s = {i:s for s,i in vocab.items()}\n","\n","  def encode(self, text):\n","    preprocessed = re.split(r'([,.?_!\"()\\']|--|\\s)', text)\n","    preprocessed = [item.strip() for item in preprocessed if item.strip()]\n","    ids = [self.s_to_i[s] for s in preprocessed]\n","    return ids\n","\n","  def decode(self, ids):\n","    text = \" \".join([self.i_to_s[i] for i in ids])\n","    text = re.sub(r'\\s+([,.?!\"()\\'])', r'\\1', text)\n","    return text"],"metadata":{"id":"sr7s5IwrXgGV","executionInfo":{"status":"ok","timestamp":1709806479737,"user_tz":-540,"elapsed":1,"user":{"displayName":"Ivan Ivanov","userId":"07148886510355966198"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["tokenizer = SimpleTokenizerV1(vocab)\n","\n","text = \"\"\"\"It's the last he painted, you know,\" Mrs. Gisburn said with pardonable pride.\"\"\"\n","ids = tokenizer.encode(text)\n","print(ids)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zwDD1onwZr_i","executionInfo":{"status":"ok","timestamp":1709806480242,"user_tz":-540,"elapsed":1,"user":{"displayName":"Ivan Ivanov","userId":"07148886510355966198"}},"outputId":"f257aee7-7420-4e22-9fc7-f3392003e175"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["[1, 58, 2, 872, 1013, 615, 541, 763, 5, 1155, 608, 5, 1, 69, 7, 39, 873, 1136, 773, 812, 7]\n"]}]},{"cell_type":"code","source":["tokenizer.decode(ids)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":54},"id":"ew8UapAjZ92j","executionInfo":{"status":"ok","timestamp":1709806480745,"user_tz":-540,"elapsed":2,"user":{"displayName":"Ivan Ivanov","userId":"07148886510355966198"}},"outputId":"39144580-bae6-4ab4-e5fd-8350d933997b"},"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'\" It\\' s the last he painted, you know,\" Mrs. Gisburn said with pardonable pride.'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["text = \"Hello, do you like tea?\"\n","tokenizer.encode(text)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":365},"id":"uSCMwJCbaAbG","executionInfo":{"status":"error","timestamp":1709806591580,"user_tz":-540,"elapsed":289,"user":{"displayName":"Ivan Ivanov","userId":"07148886510355966198"}},"outputId":"87b7cf99-331a-4763-e575-4b1e8fce47a7"},"execution_count":13,"outputs":[{"output_type":"error","ename":"KeyError","evalue":"'Hello'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-13-da5017639fa9>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mtext\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"Hello, do you like tea?\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mtokenizer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtext\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-10-0633186ebc3b>\u001b[0m in \u001b[0;36mencode\u001b[0;34m(self, text)\u001b[0m\n\u001b[1;32m      7\u001b[0m     \u001b[0mpreprocessed\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mre\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mr'([,.?_!\"()\\']|--|\\s)'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtext\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m     \u001b[0mpreprocessed\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstrip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mitem\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mpreprocessed\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mitem\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstrip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m     \u001b[0mids\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0ms_to_i\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0ms\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mpreprocessed\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mids\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-10-0633186ebc3b>\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m      7\u001b[0m     \u001b[0mpreprocessed\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mre\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mr'([,.?_!\"()\\']|--|\\s)'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtext\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m     \u001b[0mpreprocessed\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mitem\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstrip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mitem\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mpreprocessed\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mitem\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstrip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m     \u001b[0mids\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0ms_to_i\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0ms\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mpreprocessed\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mids\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'Hello'"]}]},{"cell_type":"markdown","source":["# Adding special tokens"],"metadata":{"id":"Om-0U48dblkm"}},{"cell_type":"code","source":["all_tokens = sorted(list(set(preprocessed)))\n","all_tokens.extend([\"<|endoftext|>\", \"<|unk|>\"])\n","vocab = {token:integer for integer,token in enumerate(all_tokens)}\n","\n","print(len(vocab.items()))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"r_cVcNuLaht9","executionInfo":{"status":"ok","timestamp":1709806845952,"user_tz":-540,"elapsed":347,"user":{"displayName":"Ivan Ivanov","userId":"07148886510355966198"}},"outputId":"6ca9eee6-e20b-4526-9339-c5afd970b939"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["1161\n"]}]},{"cell_type":"code","source":["for i, item in enumerate(list(vocab.items())[-5:]):\n","    print(item)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1kvK_ACibfzW","executionInfo":{"status":"ok","timestamp":1709806850489,"user_tz":-540,"elapsed":514,"user":{"displayName":"Ivan Ivanov","userId":"07148886510355966198"}},"outputId":"91641821-f0bb-4f8d-95d4-e00c0390774e"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["('younger', 1156)\n","('your', 1157)\n","('yourself', 1158)\n","('<|endoftext|>', 1159)\n","('<|unk|>', 1160)\n"]}]},{"cell_type":"markdown","source":["# Modifying the tokenizer"],"metadata":{"id":"0L3TUrdqbo9S"}},{"cell_type":"code","source":["class SimpleTokenizerV2:\n","    def __init__(self, vocab):\n","        self.str_to_int = vocab\n","        self.int_to_str = { i:s for s,i in vocab.items()}\n","\n","    def encode(self, text):\n","        preprocessed = re.split(r'([,.?_!\"()\\']|--|\\s)', text)\n","        preprocessed = [item.strip() for item in preprocessed if item.strip()]\n","        preprocessed = [item if item in self.str_to_int else \"<|unk|>\" for item in preprocessed]\n","\n","        ids = [self.str_to_int[s] for s in preprocessed]\n","        return ids\n","\n","    def decode(self, ids):\n","        text = \" \".join([self.int_to_str[i] for i in ids])\n","\n","        text = re.sub(r'\\s+([,.?!\"()\\'])', r'\\1', text)\n","        return text"],"metadata":{"id":"_MB8sTBNbg2p","executionInfo":{"status":"ok","timestamp":1709806939527,"user_tz":-540,"elapsed":389,"user":{"displayName":"Ivan Ivanov","userId":"07148886510355966198"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["text1 = \"Hello, do you like tea?\"\n","text2 = \"In the sunlit terraces of the palace.\"\n","text = \" <|endoftext|> \".join((text1, text2))\n","print(text)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"W8m0XhJGb2iB","executionInfo":{"status":"ok","timestamp":1709806943953,"user_tz":-540,"elapsed":305,"user":{"displayName":"Ivan Ivanov","userId":"07148886510355966198"}},"outputId":"5cb3af35-d045-44d0-e18c-6afd7203d9cd"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["Hello, do you like tea? <|endoftext|> In the sunlit terraces of the palace.\n"]}]},{"cell_type":"code","source":["tokenizer = SimpleTokenizerV2(vocab)\n","print(tokenizer.encode(text))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"e9THwneFb3uZ","executionInfo":{"status":"ok","timestamp":1709806968265,"user_tz":-540,"elapsed":476,"user":{"displayName":"Ivan Ivanov","userId":"07148886510355966198"}},"outputId":"acd152ef-1218-471a-a73f-9c98a8abfc64"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["[1160, 5, 362, 1155, 642, 1000, 10, 1159, 57, 1013, 981, 1009, 738, 1013, 1160, 7]\n"]}]},{"cell_type":"markdown","source":["Hello and palace were not part of the vocab, so they are given as <|unk|> tokens when encoded and also decoded"],"metadata":{"id":"cxaEW_3AcFJD"}},{"cell_type":"code","source":["print(tokenizer.decode(tokenizer.encode(text)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"y2iDFKr_b9ot","executionInfo":{"status":"ok","timestamp":1709806978683,"user_tz":-540,"elapsed":331,"user":{"displayName":"Ivan Ivanov","userId":"07148886510355966198"}},"outputId":"697e7fe9-e105-4dbf-f448-3c423f3625b1"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["<|unk|>, do you like tea? <|endoftext|> In the sunlit terraces of the <|unk|>.\n"]}]},{"cell_type":"markdown","source":["# BPE"],"metadata":{"id":"Sq33odAPdXLo"}},{"cell_type":"code","source":["import importlib\n","import tiktoken"],"metadata":{"id":"xVSgW5a2dP8J","executionInfo":{"status":"ok","timestamp":1709807344425,"user_tz":-540,"elapsed":305,"user":{"displayName":"Ivan Ivanov","userId":"07148886510355966198"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["tokenizer = tiktoken.get_encoding(\"gpt2\")"],"metadata":{"id":"AhXlaoCsdYHv","executionInfo":{"status":"ok","timestamp":1709807352927,"user_tz":-540,"elapsed":2231,"user":{"displayName":"Ivan Ivanov","userId":"07148886510355966198"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["text = \"Hello, do you like tea? <|endoftext|> In the sunlit terraces of someunknownPlace.\"\n","integers = tokenizer.encode(text, allowed_special={\"<|endoftext|>\"})\n","print(integers)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Z2dnY1-0dbGM","executionInfo":{"status":"ok","timestamp":1709807372230,"user_tz":-540,"elapsed":300,"user":{"displayName":"Ivan Ivanov","userId":"07148886510355966198"}},"outputId":"9023656e-71b4-4a2f-d677-df33b6157610"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["[15496, 11, 466, 345, 588, 8887, 30, 220, 50256, 554, 262, 4252, 18250, 8812, 2114, 286, 617, 34680, 27271, 13]\n"]}]},{"cell_type":"code","source":["strings = tokenizer.decode(integers)\n","print(strings)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BMZutjm3dgTx","executionInfo":{"status":"ok","timestamp":1709807412362,"user_tz":-540,"elapsed":449,"user":{"displayName":"Ivan Ivanov","userId":"07148886510355966198"}},"outputId":"3b3a18fa-846a-46c3-835f-ba30dde5a185"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["Hello, do you like tea? <|endoftext|> In the sunlit terraces of someunknownPlace.\n"]}]},{"cell_type":"markdown","source":["# Data sampling with a sliding window"],"metadata":{"id":"K5ilzdMtd8mo"}},{"cell_type":"code","source":["with open(\"the-verdict.txt\", \"r\", encoding=\"utf-8\") as f:\n","    raw_text = f.read()\n","\n","enc_text = tokenizer.encode(raw_text)\n","print(len(enc_text))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XNBpsqJadnuk","executionInfo":{"status":"ok","timestamp":1709807925090,"user_tz":-540,"elapsed":315,"user":{"displayName":"Ivan Ivanov","userId":"07148886510355966198"}},"outputId":"5f5892a2-8ef3-4ba7-c825-638d846b43dd"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stdout","text":["5145\n"]}]},{"cell_type":"code","source":["# remove the 1st 50 tokens for demonstration purposes\n","enc_sample = enc_text[50:]"],"metadata":{"id":"QG1yZ6nUfnPg","executionInfo":{"status":"ok","timestamp":1709807968908,"user_tz":-540,"elapsed":390,"user":{"displayName":"Ivan Ivanov","userId":"07148886510355966198"}}},"execution_count":28,"outputs":[]},{"cell_type":"code","source":["context_size = 4\n","\n","x = enc_sample[:context_size]\n","y = enc_sample[1:context_size+1]\n","print(f'x: {x}')\n","print(f'y:      {y}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"N7EILdv6fx9D","executionInfo":{"status":"ok","timestamp":1709808060300,"user_tz":-540,"elapsed":306,"user":{"displayName":"Ivan Ivanov","userId":"07148886510355966198"}},"outputId":"b976702a-f117-4a5c-ba72-da8089eb4ab2"},"execution_count":31,"outputs":[{"output_type":"stream","name":"stdout","text":["x: [290, 4920, 2241, 287]\n","y:      [4920, 2241, 287, 257]\n"]}]},{"cell_type":"code","source":["for i in range(1, context_size+1):\n","    context = enc_sample[:i]\n","    desired = enc_sample[i]\n","    print(context, \"---->\", desired)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xYY94DxWgE73","executionInfo":{"status":"ok","timestamp":1709808071826,"user_tz":-540,"elapsed":315,"user":{"displayName":"Ivan Ivanov","userId":"07148886510355966198"}},"outputId":"b961bca1-1047-4c73-b7be-130a5626b19e"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stdout","text":["[290] ----> 4920\n","[290, 4920] ----> 2241\n","[290, 4920, 2241] ----> 287\n","[290, 4920, 2241, 287] ----> 257\n"]}]},{"cell_type":"code","source":["for i in range(1, context_size+1):\n","    context = enc_sample[:i]\n","    desired = enc_sample[i]\n","    print(tokenizer.decode(context), \"---->\", tokenizer.decode([desired]))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"viChN-JCgLGV","executionInfo":{"status":"ok","timestamp":1709808092939,"user_tz":-540,"elapsed":329,"user":{"displayName":"Ivan Ivanov","userId":"07148886510355966198"}},"outputId":"7e846f10-c4c9-4830-9bad-a411aed85b69"},"execution_count":33,"outputs":[{"output_type":"stream","name":"stdout","text":[" and ---->  established\n"," and established ---->  himself\n"," and established himself ---->  in\n"," and established himself in ---->  a\n"]}]},{"cell_type":"code","source":["# Turn the inputs and targets to PyTorch tensors for an efficient data loader\n","import torch\n","from torch.utils.data import Dataset, DataLoader\n","\n","class GPTDatasetV1(Dataset):\n","  def __init__(self, txt, tokenizer, max_length, stride):\n","    self.tokenizer = tokenizer\n","    self.input_ids = []\n","    self.target_ids = []\n","\n","    token_ids = tokenizer.encode(txt)\n","\n","    for i in range(0, len(token_ids) - max_length, stride):\n","      input_chunk = token_ids[i: i+max_length]\n","      target_chunk = token_ids[i+1: i+max_length+1]\n","      self.input_ids.append(torch.tensor(input_chunk))\n","      self.target_ids.append(torch.tensor(target_chunk))\n","\n","  def __len__(self):\n","    return len(self.input_ids)\n","\n","  def __getitem__(self, idx):\n","    return self.input_ids[idx], self.target_ids[idx]"],"metadata":{"id":"citJiShDgQQK","executionInfo":{"status":"ok","timestamp":1709808425476,"user_tz":-540,"elapsed":302,"user":{"displayName":"Ivan Ivanov","userId":"07148886510355966198"}}},"execution_count":34,"outputs":[]},{"cell_type":"code","source":["# load the inputs in batches\n","def create_dataloader(txt, batch_size=4, max_length=256, stride=128, shuffle=True):\n","  tokenizer = tiktoken.get_encoding('gpt2')\n","  dataset = GPTDatasetV1(txt, tokenizer, max_length, stride)\n","  dataloader = DataLoader(dataset, batch_size=batch_size, shuffle=shuffle)\n","  return dataloader"],"metadata":{"id":"4Zd45rlJhhcJ","executionInfo":{"status":"ok","timestamp":1709808529633,"user_tz":-540,"elapsed":2,"user":{"displayName":"Ivan Ivanov","userId":"07148886510355966198"}}},"execution_count":35,"outputs":[]},{"cell_type":"code","source":["# test the dataloader with a batch_size = 1, context_size = 4\n","with open('the-verdict.txt', 'r', encoding='utf-8') as f:\n","  raw_text = f.read()\n","\n","dataloader = create_dataloader(raw_text, batch_size=1, max_length=4, stride=1, shuffle=False)\n","data_iter = iter(dataloader)\n","first_batch = next(data_iter)\n","print(first_batch)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EMvMu1p_h61l","executionInfo":{"status":"ok","timestamp":1709809112971,"user_tz":-540,"elapsed":317,"user":{"displayName":"Ivan Ivanov","userId":"07148886510355966198"}},"outputId":"1e721e1c-63fa-4e7d-e6f9-f13cd4a12a1f"},"execution_count":42,"outputs":[{"output_type":"stream","name":"stdout","text":["[tensor([[  40,  367, 2885, 1464]]), tensor([[ 367, 2885, 1464, 1807]])]\n"]}]},{"cell_type":"code","source":["second_batch = next(data_iter)\n","print(second_batch)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ef7u4Go-iP3k","executionInfo":{"status":"ok","timestamp":1709809113435,"user_tz":-540,"elapsed":2,"user":{"displayName":"Ivan Ivanov","userId":"07148886510355966198"}},"outputId":"47cb533c-65b4-4c56-9011-9d2540e93bd7"},"execution_count":43,"outputs":[{"output_type":"stream","name":"stdout","text":["[tensor([[ 367, 2885, 1464, 1807]]), tensor([[2885, 1464, 1807, 3619]])]\n"]}]},{"cell_type":"code","source":["dataloader = create_dataloader(raw_text, batch_size=8, max_length=4, stride=4)\n","\n","data_iter = iter(dataloader)\n","inputs, targets = next(data_iter)\n","print(\"Inputs:\\n\", inputs)\n","print(\"\\nTargets:\\n\", targets)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"felGHZXgiXbE","executionInfo":{"status":"ok","timestamp":1709809463487,"user_tz":-540,"elapsed":310,"user":{"displayName":"Ivan Ivanov","userId":"07148886510355966198"}},"outputId":"75e206e9-2922-49cc-9b3f-5dbe8e066b48"},"execution_count":51,"outputs":[{"output_type":"stream","name":"stdout","text":["Inputs:\n"," tensor([[   11,   290,  1816,   866],\n","        [  438, 24089,    77,   470],\n","        [  714,  1464,   651,  1474],\n","        [  281,  8468,  4922,   284],\n","        [ 2583,   408,    25,   366],\n","        [  470,  6842,   407,   284],\n","        [  271, 10899,  9859,   736],\n","        [  198,   198,  5297,   438]])\n","\n","Targets:\n"," tensor([[  290,  1816,   866,   290],\n","        [24089,    77,   470,  1986],\n","        [ 1464,   651,  1474,  1576],\n","        [ 8468,  4922,   284,   262],\n","        [  408,    25,   366,    40],\n","        [ 6842,   407,   284,   423],\n","        [10899,  9859,   736,   262],\n","        [  198,  5297,   438,    40]])\n"]}]},{"cell_type":"markdown","source":["# Creating token embeddings"],"metadata":{"id":"SBCrPYISmKlk"}},{"cell_type":"code","source":["input_ids = torch.tensor([5, 1, 3, 2])"],"metadata":{"id":"0x6pKRlnknEe","executionInfo":{"status":"ok","timestamp":1709809650391,"user_tz":-540,"elapsed":325,"user":{"displayName":"Ivan Ivanov","userId":"07148886510355966198"}}},"execution_count":52,"outputs":[]},{"cell_type":"code","source":["vocab_size = 6\n","output_dim = 3"],"metadata":{"id":"wT_A5sbxmMex","executionInfo":{"status":"ok","timestamp":1709809655378,"user_tz":-540,"elapsed":350,"user":{"displayName":"Ivan Ivanov","userId":"07148886510355966198"}}},"execution_count":53,"outputs":[]},{"cell_type":"code","source":["torch.manual_seed(123)\n","embedding_layer = torch.nn.Embedding(vocab_size, output_dim)\n","print(embedding_layer.weight)\n","# one row for each of the 6 possible tokens (vocab size)\n","# one column for each of the 3 embed dims"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8iriTqM-mNsw","executionInfo":{"status":"ok","timestamp":1709809659242,"user_tz":-540,"elapsed":420,"user":{"displayName":"Ivan Ivanov","userId":"07148886510355966198"}},"outputId":"babbefcc-3ff7-4f38-a527-d64fad68c761"},"execution_count":54,"outputs":[{"output_type":"stream","name":"stdout","text":["Parameter containing:\n","tensor([[ 0.3374, -0.1778, -0.1690],\n","        [ 0.9178,  1.5810,  1.3010],\n","        [ 1.2753, -0.2010, -0.1606],\n","        [-0.4015,  0.9666, -1.1481],\n","        [-1.1589,  0.3255, -0.6315],\n","        [-2.8400, -0.7849, -1.4096]], requires_grad=True)\n"]}]},{"cell_type":"code","source":["# apply it to a token ID\n","print(embedding_layer(torch.tensor([3])))\n","# the embedding layer is a look-up operation\n","# that retrieves rows from the embed layer's W via a token ID"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wrHCsaDLmOoI","executionInfo":{"status":"ok","timestamp":1709815006329,"user_tz":-540,"elapsed":352,"user":{"displayName":"Ivan Ivanov","userId":"07148886510355966198"}},"outputId":"f900d17b-8147-40f7-81e1-cf5f8999a113"},"execution_count":57,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[-0.4015,  0.9666, -1.1481]], grad_fn=<EmbeddingBackward0>)\n"]}]},{"cell_type":"code","source":["print(embedding_layer(input_ids))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"e8gXKk8imwqb","executionInfo":{"status":"ok","timestamp":1709815314636,"user_tz":-540,"elapsed":325,"user":{"displayName":"Ivan Ivanov","userId":"07148886510355966198"}},"outputId":"b4d93ce9-d370-40df-c35e-6f45659d5abb"},"execution_count":58,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[-2.8400, -0.7849, -1.4096],\n","        [ 0.9178,  1.5810,  1.3010],\n","        [-0.4015,  0.9666, -1.1481],\n","        [ 1.2753, -0.2010, -0.1606]], grad_fn=<EmbeddingBackward0>)\n"]}]},{"cell_type":"code","source":["output_dim = 256\n","vocab_size = 50257\n","token_embedding_layer = torch.nn.Embedding(vocab_size, output_dim)"],"metadata":{"id":"hkS4ktDO7zXF","executionInfo":{"status":"ok","timestamp":1709816203393,"user_tz":-540,"elapsed":327,"user":{"displayName":"Ivan Ivanov","userId":"07148886510355966198"}}},"execution_count":59,"outputs":[]},{"cell_type":"code","source":["max_length = 4\n","dataloader = create_dataloader(raw_text, batch_size=8, max_length=max_length, stride=5, shuffle=False)\n","data_iter = iter(dataloader)\n","inputs, targets = next(data_iter)\n","print('Token IDs: \\n', inputs)\n","print('\\nInputs shape:\\n', inputs.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Pesir3dy_MVS","executionInfo":{"status":"ok","timestamp":1709816316542,"user_tz":-540,"elapsed":395,"user":{"displayName":"Ivan Ivanov","userId":"07148886510355966198"}},"outputId":"0b159223-bcc8-44f2-84ab-cf3fdd84b9e8"},"execution_count":60,"outputs":[{"output_type":"stream","name":"stdout","text":["Token IDs: \n"," tensor([[   40,   367,  2885,  1464],\n","        [ 3619,   402,   271, 10899],\n","        [  257,  7026, 15632,   438],\n","        [  257,   922,  5891,  1576],\n","        [  568,   340,   373,   645],\n","        [ 5975,   284,   502,   284],\n","        [  326,    11,   287,   262],\n","        [  286,   465, 13476,    11]])\n","\n","Inputs shape:\n"," torch.Size([8, 4])\n"]}]},{"cell_type":"code","source":["# output_dim = 256\n","# vocab_size = 50257\n","# token_embedding_layer = torch.nn.Embedding(vocab_size, output_dim)\n","token_embeddings = token_embedding_layer(inputs)\n","print(token_embeddings.shape)\n","# b, c, e"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"L7q1YWwL_n4L","executionInfo":{"status":"ok","timestamp":1709816366185,"user_tz":-540,"elapsed":317,"user":{"displayName":"Ivan Ivanov","userId":"07148886510355966198"}},"outputId":"84633af7-08a3-44ce-8041-c809625d8be8"},"execution_count":61,"outputs":[{"output_type":"stream","name":"stdout","text":["torch.Size([8, 4, 256])\n"]}]},{"cell_type":"code","source":["# create absolute positioning embed\n","block_size = max_length\n","pos_embedding_layer = torch.nn.Embedding(block_size, output_dim)\n","pos_embeddings = pos_embedding_layer(torch.arange(block_size))\n","print(pos_embeddings.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hlMr4LTV_0Fl","executionInfo":{"status":"ok","timestamp":1709816438407,"user_tz":-540,"elapsed":333,"user":{"displayName":"Ivan Ivanov","userId":"07148886510355966198"}},"outputId":"a772e398-451a-4aa3-e65c-4d1ca917950b"},"execution_count":62,"outputs":[{"output_type":"stream","name":"stdout","text":["torch.Size([4, 256])\n"]}]},{"cell_type":"code","source":["# we can add the positional embeds to the token embeds\n","input_embeddings = token_embeddings + pos_embeddings\n","print(input_embeddings.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jPFwIlGxAFtY","executionInfo":{"status":"ok","timestamp":1709816597114,"user_tz":-540,"elapsed":317,"user":{"displayName":"Ivan Ivanov","userId":"07148886510355966198"}},"outputId":"81e1e5bd-3444-4da7-cc36-46e1c7810c1a"},"execution_count":64,"outputs":[{"output_type":"stream","name":"stdout","text":["torch.Size([8, 4, 256])\n"]}]}]}